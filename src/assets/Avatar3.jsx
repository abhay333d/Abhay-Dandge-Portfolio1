/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/models/avatar3.glb 
*/

import React, { useEffect, useRef } from "react";
import { useFrame, useGraph } from "@react-three/fiber";
import { useAnimations, useFBX, useGLTF } from "@react-three/drei";
import { SkeletonUtils } from "three-stdlib";
import { useControls } from "leva";
import * as THREE from "three";

export function Avatar3(props) {
  const { animation } = props;

  const { HeadFollow, CursorFollow, WireFrame } = useControls({
    HeadFollow: false,
    CursorFollow: false,
    WireFrame: false,
  });

  const group = useRef();
  const { scene } = useGLTF("models/avatar3.glb");
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { nodes, materials } = useGraph(clone);

  const { animations: SittingAnimation } = useFBX("fbx/animations/Sitting.fbx");
  const { animations: StandingAnimation } = useFBX("fbx/animations/Idle.fbx");
  const { animations: StartWalikingAnimation } = useFBX(
    "fbx/animations/Start_Walking.fbx"
  );
  const { animations: WalkingAnimation } = useFBX("fbx/animations/Walking.fbx");
  const { animations: StopWalkingAnimation } = useFBX(
    "fbx/animations/Stop_Walking.fbx"
  );

  SittingAnimation[0].name = "Sitting";
  StandingAnimation[0].name = "Standing";
  StartWalikingAnimation[0].name = "StartWalking";
  WalkingAnimation[0].name = "Walking";
  StopWalkingAnimation[0].name = "StopWalking";

  const { actions } = useAnimations(
    [
      SittingAnimation[0],
      StandingAnimation[0],
      StartWalikingAnimation[0],
      WalkingAnimation[0],
      StopWalkingAnimation[0],
    ],
    group
  );

  useFrame((state) => {
    if (HeadFollow) {
      group.current.getObjectByName("Neck").lookAt(state.camera.position);
    }
    if (CursorFollow) {
      const target = new THREE.Vector3(state.mouse.x, state.mouse.y, 1);
      group.current.getObjectByName("Neck").lookAt(target);
    }
  });

  useEffect(() => {
    const action = actions[animation];
    action.reset().fadeIn(0.1).play();
    return () => {
      action.fadeOut(1);
    };
  }, [animation, actions]);

  useEffect(() => {
    if (WireFrame) {
      Object.values(materials).forEach((material) => {
        material.wireframe = true;
      });
    } else {
      Object.values(materials).forEach((material) => {
        material.wireframe = false;
      });
    }
  }
  , [WireFrame, materials]);
  

  return (
    <group {...props} ref={group} dispose={null} rotation-x={-Math.PI/2}>
      <primitive object={nodes.Hips} />
      <skinnedMesh
        name="Wolf3D_Avatar"
        geometry={nodes.Wolf3D_Avatar.geometry}
        material={materials.Wolf3D_Avatar}
        skeleton={nodes.Wolf3D_Avatar.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Avatar.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Avatar.morphTargetInfluences}
      />
    </group>
  );
}

useGLTF.preload("models/avatar3.glb");
